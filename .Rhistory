row5_digit
zip.train[5,1]
image(t(row5_digit), col=grey(31:0/31), xlab = "", ylab = "")
image(t(row5_digit), col=grey(0:31/31), xlab = "", ylab = "")
image(t(row5_digit), col=grey(10:0/10), xlab = "", ylab = "")
image(t(row5_digit), col=grey(31:0/31), xlab = "", ylab = "")
image(t(row5_digit), col=grey(10:0/10), xlab = "", ylab = "")
image(t(row5_digit), col=grey(3:0/3), xlab = "", ylab = "")
image(t(row5_digit), col=grey(2:0/2), xlab = "", ylab = "")
threes = filter(zip.train, zip.train[,1] == 3)
class(zip.train)
threes = zip.train[zip.train[,1] == 3,-1]
View(threes)
dim(threes)
mean_threes = colMeans(threes)
image(t(vector2image(mean_threes)), col=grey(31:0/31), xlab = "", ylab = "")
image(t(vector2image(mean_threes)), col=grey(310:0/310), xlab = "", ylab = "")
image(t(vector2image(mean_threes)), col=grey(31000:0/31000), xlab = "", ylab = "")
var(threes)
var_three = var(threes)
dim(var_three)
image(t(matrix2image(var_three)), col=grey(31:0/31), xlab = "", ylab = "")
X = zip.train[,-1]
pca_zip = prcomp(X, scale=FALSE)
summary(pca_zip)
prop_var = pca_zip$sdev^2
head(prop_var)
cumul_prop_var = cumsum(prop_var)
head(cumul_prop_var)
which(cumul_prop_var>=0.7)[1]
prop_var = pca_zip$sdev^2/sum(pca_zip$sdev^2)
head(prop_var)
which(prop_var>=0.7)
cumul_prop_var = cumsum(prop_var)
cumul_prop_var
which(cumul_prop_var>=0.7)
which(cumul_prop_var>=0.7)[1]
plot(pca_zip, npcs=30, type="lines", main="")
plot(pca_zip, npcs=10, type="lines", main="")
cumul_prop_var[6]
S = var(X)
sum(diag(S))
Y = pca_zip$x
T = var(Y)
sum(diag(T))
Y_6 = Y[,1:6]
T_6 = var(Y_6)
sum(diag(T_6))
L = pca_zip$rotation
X_6 = Y_6 %*% t(L[,1:6])
S_6 = var(X_6)
par(mfrow=c(1,2))
image(t(matrix2image(S)), col=grey(31:0/31), xlab="", ylab="")
image(t(matrix2image(S_6)), col=grey(31:0/31), xlab="", ylab = "")
data("airpollution", package = nclSLR)
library(nclSLR)
data("airpollution", package = nclSLR)
data("airpollution")
dim(airpollution)
head(airpollution)
?airpollution
pairs(airpollution)
plot(airpollution$PM2, airpollution$PMEAN)
air2 = airpollution
max(air2$PM2)
air2 = filter(airpollution, rownames(airpollution) != "JERSEYCITY")
View(air2)
air2
head(air2)
head(airpollution)
rownames(airpollution)
air2 = filter(airpollution, rownames(airpollution) != "JERSEYC")
dim(air2)
plot(air2$PMEAN,air2$PM2)
air = airpollution
var(air)
pca_air = prcomp(air, scale = TRUE)
pca_air
summary(pca_air)
plot(pca_air$x[,1], pca_air$x[,2])
sum(diag(air))
sum(diag(pca_air))
diag(var(air))
sum(diag(var(air)))
dim(threes)
var(threes)
dim(var(threes))
diag(var(threes))
sum(diag(var(threes)))
trace(var(threes))
ax <- diag(var(threes))
plot(ax)
par(mfrow=c(1,1))
plot(ax)
plot(ax, type="l")
View(var(threes))
image(t(matrix2image(var_three)), col=grey(31:0/31), xlab = "", ylab = "")
image(t(matrix2image(var_three)), col=grey(15:0/15), xlab = "", ylab = "")
image(t(matrix2image(var_three)), col=grey(5:0/5), xlab = "", ylab = "")
summary(pca_zip)
dim(airpollution)
View(pca_arr1)
View(pca_zip)
View(pca_zip)
rm(pca_zip)
rm(list=())
list=()
list()
lm()
list(all)
ls()
rm(list=(ls))
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
titanic_train = read.csv(file = "~/Desktop/all/test.csv")
View(titanic_train)
View(titanic_train)
titanic_test = read.csv(file = "~/Desktop/all/test.csv")
View(titanic_test)
titanic_train = read.csv(file = "~/Desktop/all/train.csv")
View(titanic_train)
sum(titanic_train$Survived)
mean(titanic_train$Survived)
table(titanic_train$Pclass, titanic_train$Survived)
tblFun <- function(x){
tbl <- table(x)
res <- cbind(tbl,round(prop.table(tbl)*100,2))
colnames(res) <- c('Count','Percentage')
res
}
tblFun(table(titanic_train$Pclass, titanic_train$Survived))
View(titanic_train)
x = read.csv(file = "Desktop/DS_Projects/CSC8635_ML_Asg/data/train.csv")
1 + 1
stats = fromJSON("Desktop/DS_Projects/CSC_Cloud_Asg/data/benchcollection.json")
library(RJSONIO)
stats = fromJSON("Desktop/DS_Projects/CSC_Cloud_Asg/data/benchcollection.json")
##### Parsing function
parse_json = function(json, id){
df <- data.frame(rx_bytes=double(),
tx_bytes=double(),
mem_usage=double(),
cpu_tot=double(),
stringsAsFactors=FALSE)
for (j in 1:length(stats)){
if(stats[[j]][['id']] == id){
service = stats[[j]][['jsonStats']]
rx_bytes = numeric()
tx_bytes = numeric()
mem_usage = numeric()
cpu_tot = numeric()
for (i in service){
rx_bytes = c(rx_bytes, i[['network']][['tx_bytes']])
tx_bytes = c(tx_bytes, i[['network']][['rx_bytes']])
mem_usage = c(mem_usage, i[['memory']][['usage']])
cpu_tot = c(cpu_tot, i[['cpu']][['usage']][['total']])
}
x = data.frame(rx_bytes,tx_bytes,mem_usage,cpu_tot)
df = rbind(df,x)
}
}
return(df)
}
#Call parsing functions
web1 = parse_json(stats, "27834e482f3ed466b841d959ef2fcd1eeac6704addab367b866b5c5f988b6520")
web2 = parse_json(stats, "05bf2fabd3fcf0185c63217a8fd68e3a25915434eca62a60ed6c384bfc96156b")
file <- "~/Desktop/_chat.txt"
con <- file(description=file, open="r")
## Hopefully you know the number of lines from some other source or
com <- paste("wc -l ", file, " | awk '{ print $1 }'", sep="")
com
n <- system(command=com, intern=TRUE)
n
df = df()
df = data.frame()
for(i in 1:n) {
tmp <- scan(file=con, nlines=1, quiet=TRUE)
df = rbind(tmp)
## do something on a line of data
}
library(ProjectTemplate)
setwd("Desktop/DS_Projects/CSC8634_CC_Project/")
load.project()
app_check$timestamp[1]
app_check$timestamp[2]
app_check$timestamp[6]
app_check$timestamp[7]
app_check$timestamp[6] == app_check$timestamp[7]
app_check$timestamp[13] == app_check$timestamp[14]
app_check$timestamp[13]
app_check$timestamp[14]
app_check$timestamp[14] - app_check$timestamp[13]
length(unique(app_check$taskId))
length(unique(gpu$taskId))
length(unique(task_xy$taskId))
task_xy_red = task_xy %>%
# filter(level == 12) %>%
mutate(jobId = NULL)
# Join task_xy_red to app_check joining on taskId
test = left_join(app_check, task_xy_red)
View(test)
max(gpu$timestamp)
max(gpu$timestamp) - min(gpu$timestamp)
max(app_check$timestamp) - min(app_check$timestamp)
max(app_check$timestamp)
max(gpu$timestamp)
min(app_check$timestamp)
min(gpu$timestamp)
test2 = arrange(gpu, timestamp)
View(test2)
test = arrange(test, timestamp)
View(test)
x = 1d1602dc-f615-a7c7-ab53-fb4a7a479534
x = '1d1602dc-f615-a7c7-ab53-fb4a7a479534'
x
str(test)
x %in% test$taskId
y = '8a9ab92a-b854-4365-b748-8143577a5a12'
y %in% test$taskId
test = test %>%
mutate(jobId = NULL)
test = left_join(app_check, task_xy_red)
test = test %>%
mutate(jobId = NULL)
arrange(timestamp)
# Join task_xy_red to app_check joining on taskId
test = left_join(app_check, task_xy_red)
test = test %>%
mutate(jobId = NULL) %>%
arrange(timestamp)
test = left_join(app_check, task_xy_red)
test = test %>%
mutate(jobId = NULL) %>%
arrange(taskId, timestamp)
test$timestamp[9] - test$timestamp[2]
test$timestamp[3] - test$timestamp[2]
q1 = test %>%
filter(eventName != "TotalRender")
View(q1)
test3 = q1[1:8,]
View(test3)
q1 = test %>%
group_by(taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
q1 = test %>%
filter(eventName != 'TotalRender')
group_by(taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
group_by(eventName) %>%
summarise(mean_dur = mean(duration))
q1 = test %>%
filter(eventName != 'TotalRender') %>%
group_by(taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
group_by(eventName) %>%
summarise(mean_dur = mean(duration))
q1 = test %>%
group_by(taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
group_by(eventName) %>%
summarise(mean_dur = mean(duration))
plot(gpu$gpuTempC, gpu$gpuTempC)
q2 = test %>%
select(5:8)
View(q2)
q2 = gpu %>%
select(5:8)
sample(q2, 100)
dim(q2)
sample(1:dim(q2)[1],100)
x = sample(1:dim(q2)[1],100)
q2[,x]
q2[x,]
q2 = gpu %>%
select(5:8)
x = sample(1:dim(q2)[1],10000)
q2_samp = q2[x,]
plot(q2$powerDrawWatt,q2$gpuTempC)
plot(q2$gpuUtilPerc,q2$gpuTempC)
plot(q2_samp$gpuUtilPerc,q2_samp$gpuTempC)
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
x = sample(1:dim(q2)[1],10000)
q2_samp = q2[x,]
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
x = sample(1:dim(q2)[1],10000)
q2_samp = q2[x,]
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
x = sample(1:dim(q2)[1],10000)
q2_samp = q2[x,]
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
x = sample(1:dim(q2)[1],10000)
q2_samp = q2[x,]
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
x = sample(1:dim(q2)[1],10000)
q2_samp = q2[x,]
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
x = sample(1:dim(q2)[1],10000)
q2_samp = q2[x,]
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
x = sample(1:dim(q2)[1],100000)
q2_samp = q2[x,]
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
x = sample(1:dim(q2)[1],10000)
q2_samp = q2[x,]
plot(q2_samp$powerDrawWatt,q2_samp$gpuTempC)
plot(q2_samp$gpuUtilPerc,q2_samp$gpuTempC)
q1 = test %>%
group_by(taskId, eventName)
View(q1)
q1 = test %>%
group_by(taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
View(test)
test$taskId[1] == q1$taskId[1]
test$taskId[6] - test$taskId[3]
test$timestamp[6] - test$timestamp[3]
(test$timestamp[6] - test$timestamp[3]) == q1$duration[1]
(test$timestamp[9] - test$timestamp[2]) == q1$duration[4]
(test$timestamp[9] - test$timestamp[2]) == q1$duration[3]
test$taskId[100] == q1$taskId[100]
tail(test)
tail(q1)
(test$timestamp[660398] - test$timestamp[660397]) == q1$duration[328962]
(test$timestamp[660398] - test$timestamp[660397]) == q1$duration[328961]
(test$timestamp[660398] - test$timestamp[660397]) == q1$duration[328963]
filter(eventName == Render) %>%
group_by(taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
View(test)
q3 = test %>%
filter(eventName == 'Render') %>%
group_by(taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
View(q3)
gpu_q3 = gpu %>%
arrange(hostname)
View(gpu_q3)
gpu_q3 = gpu %>%
arrange(timestamp, hostname)
View(gpu_q3)
gpu_q3 = gpu %>%
arrange(hostname, timestamp)
View(gpu_q3)
q3 = test %>%
filter(eventName == 'Render') %>%
group_by(timestamp, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
q3 = test %>%
filter(eventName == 'Render') %>%
group_by(timestamp, taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
q3 = test %>%
filter(eventName == 'Render') %>%
group_by(taskId, eventName) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
q3 = test %>%
filter(eventName == 'Render') %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
# Q3-b
q3 = test %>%
filter(eventName == 'Render') %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
arrange(x,y)
# Q3-b
q3 = test %>%
filter(eventName == 'Render', level == 12) %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
arrange(x,y)
q3 = test %>%
filter(eventName == 'Render', level == 12) %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
arrange(x,y) %>%
select(taskId, duration)
q3 = test %>%
filter(eventName == 'Render', level == 12) %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
arrange(x,y) %>%
mutate(x = NULL, y = NULL, eventName = NULL)
# Q3-b
q3 = test %>%
filter(eventName == 'Render', level == 12) %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
arrange(x,y)
mutate(q3, x = NULL, y = NULL, eventName = NULL)
q3 = test %>%
filter(eventName == 'Render', level == 12) %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
arrange(x,y)
q3 = q3[,-2:4]
q3 = q3[,-(2:4)]
heatmap(q3, Rowv=NA, Colv=NA, labRow=NA)
q3$taskId = 1:length(q3$taskId)
heatmap(q3, Rowv=NA, Colv=NA, labRow=NA)
heatmap(as.matrix(q3), Rowv=NA, Colv=NA, labRow=NA)
q3 = test %>%
filter(eventName == 'Render', level == 12) %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
arrange(x,y)
q3 = q3[,-(1:3)]
q3 = test %>%
filter(eventName == 'Render', level == 12) %>%
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
arrange(x,y)
q3 = q3[,-(1:2)]
df = data.frame()
mat = matrix(nrow = 256, ncol = 256)
x = split(q3$duration, ceiling(seq_along(q3$duration)/256))
View(x)
x{1}
x[1]
df = data.frame()
for (i in x){
df = rbind(df, x[i])
}
df = data.frame()
str(x[1])
mat = matrix(ncol = 256)
for (i in x){
mat = rbind(mat, x[i])
}
View(mat)
mat[1]
df = data.frame(matrix(NA,1,256))
View(df)
for (i in x){
df = rbind(df, x[i])
}
x[[1]]
for (i in x){
df = rbind(df, x[[i]])
}
length(x)
for (i in 1:length(x)){
df = rbind(df, x[[i]])
}
View(df)
df = data.frame(matrix(NA,NA,256))
df = data.frame(matrix(NA,ncol = 256))
View(df)
df = data.frame(matrix(ncol = 256))
df = data.frame(matrix(ncol = 256))
df = data.frame()
for (i in 1:length(x)){
df = rbind(df, x[[i]])
}
test4 = as.matrix(df)
View(test4)
heatmap(test4, Rowv=NA, Colv=NA, labRow=NA)
df = data.frame()
for (i in length(x):1){
df = rbind(df, x[[i]])
}
test4 = as.matrix(df)
heatmap(test4, Rowv=NA, Colv=NA, labRow=NA)
names(df)
names(df) = 1:256
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA)
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, labCol = NULL)
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, verbose = NULL)
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, verbose = NA)
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, verbose = FALSE)
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, main = "NCL Terascope Rendering Duration by Tile")
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, main = "NCL Terascope: Rendering Duration by Tile")
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, labCol = NA, main = "NCL Terascope: Rendering Duration by Tile")
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, labCol = NA, ylab = "NCL Terascope: Rendering Duration by Tile")
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "NCL Terascope: Rendering Duration by Tile")
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
View(df)
plot(df$1)
plot(df$2)
plot(df$'1')
df$`1''
)
)
]
''
'
)
a'df'
adfka''
df
a
asd
)
``
`
df$`1`
plot(df[1,])
df[1,]
df[255,]
type(df[1,])
class(df[1,])
class(df$`10`)
ggplot(data = q3, aes(x = x, y = y)) +
geom_tile(aes(fill = duration))
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, labCol = NA, col = heat.colors(256), xlab = "Relative Rendering Duration by Tile")
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
df = data.frame()
for (i in length(x):1){
df = rbind(df, x[[i]])
}
names(df) = 1:256
heatmap(as.matrix(df), Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
