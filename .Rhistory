geom_vline(xintercept = mean(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x$duration)+c, y=ymax*d, label= paste("Arth. Mean",round(mean(x$duration),4)), size=2.5, hjust=0) +
# median
geom_vline(xintercept = median(x$duration), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x$duration)+e, y=ymax*f, label= paste("Median",round(median(x$duration),4)), size=2.5, hjust=0) +
# 95th percentile
geom_vline(xintercept = quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20]+g, y=ymax*h, label= paste("95th Percentile",round(quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20],4)), size=2.5, hjust=0) +
# max
geom_vline(xintercept = max(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x$duration)+i, y=ymax*j, label= paste("Max",round(max(x$duration),4)), size=2.5, hjust=1) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
plot_hist('Saving Config', n=0.0001,d=0.95,f=0.9,h=0.85)
plot_hist('Saving Config', n=0.001,d=0.95,f=0.9,h=0.85)
exec_render_red = plot_hist('Saving Config', n=0.001,d=0.95,f=0.9,h=0.85)
cache('exec_render_red')
plot_hist = function(event, n=0.1, colour = 'white', a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=0,j=1){
# Filter as per selected event
x = task_runtimes %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes(duration)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x$duration), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x$duration)+a, y=ymax*b, label= paste("Min",round(min(x$duration),4)), size=2.5, hjust=0) +
# mean
geom_vline(xintercept = mean(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x$duration)+c, y=ymax*d, label= paste("Arth. Mean",round(mean(x$duration),4)), size=2.5, hjust=0) +
# median
geom_vline(xintercept = median(x$duration), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x$duration)+e, y=ymax*f, label= paste("Median",round(median(x$duration),4)), size=2.5, hjust=0) +
# 95th percentile
geom_vline(xintercept = quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20]+g, y=ymax*h, label= paste("95th Percentile",round(quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20],4)), size=2.5, hjust=0) +
# max
geom_vline(xintercept = max(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x$duration)+i, y=ymax*j, label= paste("Max",round(max(x$duration),4)), size=2.5, hjust=1) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
plot_hist('Saving Config',colour='#0066CC',n=0.0001,d=0.95,f=0.9,h=0.85)
exec_render = plot_hist('Saving Config',colour='#0066CC',n=0.0001,d=0.95,f=0.9,h=0.85)
cache('exec_render')
lot_hist('Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist('Tiling', n=0.005,c=-0.03,e=0.025,g=0.035)
plot_hist('Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist = function(event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=0,j=1){
# Filter as per selected event
x = task_runtimes %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes(duration)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x$duration), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x$duration)+a, y=ymax*b, label= paste("Min",round(min(x$duration),rnd)), size=2.5, hjust=0) +
# mean
geom_vline(xintercept = mean(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x$duration)+c, y=ymax*d, label= paste("Arth. Mean",round(mean(x$duration),rnd)), size=2.5, hjust=0) +
# median
geom_vline(xintercept = median(x$duration), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x$duration)+e, y=ymax*f, label= paste("Median",round(median(x$duration),rnd)), size=2.5, hjust=0) +
# 95th percentile
geom_vline(xintercept = quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20]+g, y=ymax*h, label= paste("95th Percentile",round(quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=0) +
# max
geom_vline(xintercept = max(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x$duration)+i, y=ymax*j, label= paste("Max",round(max(x$duration),rnd)), size=2.5, hjust=1) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
plot_hist('Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist('Tiling', n=0.005,c=-0.03,e=0.025,g=0.035)
plot_hist('Tiling', n=0.005)
# Look at start/stop times for each render and fit them into gpu stats based on timestamps
plot_hist = function(event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=0,j=1){
# Filter as per selected event
x = task_runtimes %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes(duration)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x$duration), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x$duration)+a, y=ymax*b, label= paste("Min",round(min(x$duration),rnd)), size=2.5, hjust=0) +
# mean
geom_vline(xintercept = mean(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x$duration)+c, y=ymax*d, label= paste("Arth. Mean",round(mean(x$duration),rnd)), size=2.5, hjust=1) +
# median
geom_vline(xintercept = median(x$duration), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x$duration)+e, y=ymax*f, label= paste("Median",round(median(x$duration),rnd)), size=2.5, hjust=0) +
# 95th percentile
geom_vline(xintercept = quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20]+g, y=ymax*h, label= paste("95th Percentile",round(quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=0) +
# max
geom_vline(xintercept = max(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x$duration)+i, y=ymax*j, label= paste("Max",round(max(x$duration),rnd)), size=2.5, hjust=1) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
exec_tiling = plot_hist('Tiling', n=0.005)
plot_hist = function(event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=0,j=1){
# Filter as per selected event
x = task_runtimes %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes(duration)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x$duration), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x$duration)+a, y=ymax*b, label= paste("Min",round(min(x$duration),rnd)), size=2.5, hjust=0) +
# mean
geom_vline(xintercept = mean(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x$duration)+c, y=ymax*d, label= paste("Arth. Mean",round(mean(x$duration),rnd)), size=2.5, hjust=1) +
# median
geom_vline(xintercept = median(x$duration), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x$duration)+e, y=ymax*f, label= paste("Median",round(median(x$duration),rnd)), size=2.5, hjust=0) +
# 95th percentile
geom_vline(xintercept = quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20]+g, y=ymax*h, label= paste("95th Percentile",round(quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=0) +
# max
geom_vline(xintercept = max(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x$duration)+i, y=ymax*j, label= paste("Max",round(max(x$duration),rnd)), size=2.5, hjust=1) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
exec_tiling = plot_hist('Tiling', n=0.005)
plot_hist('Tiling', n=0.005)
exec_tiling = plot_hist('Tiling', n=0.005)
plot_hist('Render', n=0.5, c=-3,e=2.5,g=4)
plot_hist('Render', n=0.5)
plot_hist('Uploading',colour='#0066CC', c=2.2,d=0.9,f=0.95,g=2.68,h=0.85)
plot_hist('Uploading',colour='#0066CC',d=0.9,f=0.95,h=0.85)
plot_hist = function(event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=0,j=1){
# Filter as per selected event
x = task_runtimes %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes(duration)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x$duration), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x$duration)+a, y=ymax*b, label= paste("Min",round(min(x$duration),rnd)), size=2.5, hjust=0) +
# mean
geom_vline(xintercept = mean(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x$duration)+c, y=ymax*d, label= paste("Arth. Mean",round(mean(x$duration),rnd)), size=2.5, hjust=0) +
# median
geom_vline(xintercept = median(x$duration), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x$duration)+e, y=ymax*f, label= paste("Median",round(median(x$duration),rnd)), size=2.5, hjust=0) +
# 95th percentile
geom_vline(xintercept = quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20]+g, y=ymax*h, label= paste("95th Percentile",round(quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=0) +
# max
geom_vline(xintercept = max(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x$duration)+i, y=ymax*j, label= paste("Max",round(max(x$duration),rnd)), size=2.5, hjust=1) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
plot_hist('Uploading',colour='#0066CC',d=0.9,f=0.95,h=0.85)
plot_hist = function(event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = task_runtimes %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes(duration)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x$duration), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x$duration), y=ymax*b, label= paste("Min",round(min(x$duration),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x$duration), y=ymax*d, label= paste("Arth. Mean",round(mean(x$duration),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x$duration), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x$duration), y=ymax*f, label= paste("Median",round(median(x$duration),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x$duration), y=ymax*j, label= paste("Max",round(max(x$duration),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
cache("plot_hist")
plot_hist('Uploading',colour='#0066CC',d=0.9,f=0.95,h=0.85)
plot_hist('Render', n=0.5)
plot_hist('Render', n=0.5,c=1)
plot_hist('Tiling', n=0.005)
plot_hist('Tiling', n=0.005,c=1)
plot_hist('Uploading',colour='#0066CC',d=0.9,f=0.95,h=0.85)
plot_hist('Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist('Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist('Tiling', n=0.005,c=1)
plot_hist('Render', n=0.5,c=1)
plot_hist('Uploading',colour='#0066CC',d=0.9,f=0.95,h=0.85)
heat_vis('Render','temp',cap_label='off')
heat_vis('Render','temp',caption='off')
heat_vis('Render','duration',caption='off')
comp_gpu = task_runtimes %>%
# Remove non-render tasks
filter(eventName == 'Render') %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
# Aggregate by mean render time
group_by(gpuSerial) %>%
summarise(avg_dur = mean(duration)) %>%
# Add index column for plotting
mutate(index = 1:1024)
# Plot render time by S/N
ggplot(comp_gpu) + geom_point(aes(gpuSerial, avg_dur)) + labs(x = 'GPU S/N', y = 'Mean Render Time (s)') + geom_hline(yintercept = mean(comp_gpu$avg_dur), color = 'red')
# Plot render time by S/N index to more easily show spread
ggplot(comp_gpu) + geom_point(aes(index, avg_dur)) + labs(x = 'GPU S/N index', y = 'Mean Render Time (s)') + geom_hline(yintercept = mean(comp_gpu$avg_dur), color = 'red')
# Seems to be a distinct clustering of mean rendering times into approximately 2 clusters around the mean (41.3s)
summary(comp_gpu$avg_dur)
heat_vis('Render','temp',caption='on')
gpu_plot_agg = gpu_task %>%
group_by(eventName) %>%
summarise(watt = mean(watt), temp = mean(temp), cpu = mean(cpu), mem = mean(mem), n = n())
View(gpu_plot_agg)
# Plot
ggplot(gpu_render) + geom_point(aes(gpuSerial, watt)) + labs(x = 'GPU S/N', y = 'Mean Render Time (s)')
View(gpu_task)
View(task_runtimes)
plot_hist = function(df, event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes(duration)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x$duration), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x$duration), y=ymax*b, label= paste("Min",round(min(x$duration),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x$duration), y=ymax*d, label= paste("Arth. Mean",round(mean(x$duration),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x$duration), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x$duration), y=ymax*f, label= paste("Median",round(median(x$duration),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x$duration, probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x$duration), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x$duration), y=ymax*j, label= paste("Max",round(max(x$duration),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
cache("plot_hist")
plot_hist = function(df, var_col, event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
plot_hist(task_runtimes,"duration",'Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist('task_runtimes',"duration",'Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist('task_runtimes','duration','Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist = function(df, var_col, event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes_string(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = "Execution Time (s)", y = "Frequency")
}
plot_hist('task_runtimes','duration','Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist(task_runtimes,'duration','Saving Config',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist(task_runtimes,'duration','Tiling', n=0.005,c=1)
plot_hist(task_runtimes,'duration','Render', n=0.5,c=1)
plot_hist(task_runtimes,'duration','Uploading',colour='#0066CC',d=0.9,f=0.95,h=0.85)
View(gpu_task)
plot_hist(gpu_task,'watt','Render', n=0.5,c=1)
# Look at start/stop times for each render and fit them into gpu stats based on timestamps
plot_hist = function(df, var_col, lab = var_col, event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes_string(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = lab, y = "Frequency")
}
plot_hist(gpu_task,'watt','Render', n=0.5,c=1)
# Look at start/stop times for each render and fit them into gpu stats based on timestamps
plot_hist = function(df, var_col, lab = var_col, event, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes_string(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = lab, y = "Frequency")
}
plot_hist(task_runtimes,'duration','Tiling', n=0.005,c=1)
plot_hist = function(df, var_col,event,lab=var_col, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes_string(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = lab, y = "Frequency")
}
plot_hist(task_runtimes,'duration','Render', n=0.5,c=1)
plot_hist(task_runtimes,'duration','Render',lab = 'Execution Time (s)', n=0.5,c=1)
plot_hist(task_runtimes,'duration','Saving Config',lab = 'Execution Time (s)',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
plot_hist(gpu_task,'watt','Render',n=0.5,c=1)
plot_hist(gpu_task,'watt','Render',lab = 'Power Consumption (W)', n=0.5,c=1)
plot_hist(gpu_task,'temp','Render',lab = 'Power Consumption (W)', n=0.5,c=1)
plot_hist(gpu_task,'watt','Tiling',lab = 'Power Consumption (W)', n=0.5,c=1)
plot_hist(gpu_task,'watt','Uploading',lab = 'Power Consumption (W)', n=0.5,c=1)
plot_hist(gpu_task,'watt','Saving Config',lab = 'Power Consumption (W)', n=0.5,c=1)
plot_hist(gpu_task,'watt','Saving Config',lab = 'Power Consumption (W)', n=0.1,c=1)
plot_hist(gpu_task,'watt','Saving Config',lab = 'Power Consumption (W)', n=0.2,c=1)
plot_hist(gpu_task,'watt','Saving Config',lab = 'Power Consumption (W)', n=0.2,c=0)
plot_hist(gpu_task,'watt','Uploading',lab = 'Power Consumption (W)', n=0.5,c=1)
plot_hist(gpu_task,'watt','Uploading',lab = 'Power Consumption (W)', n=0.2,c=1)
plot_hist(gpu_task,'watt','Tiling',lab = 'Power Consumption (W)', n=0.5,c=1)
plot_hist(gpu_task,'watt','Tiling',lab = 'Power Consumption (W)', n=0.2,c=1)
plot_hist(gpu_task,'watt','Tiling',lab = 'Power Consumption (W)', n=0.2,c=0,e=1)
plot_hist(gpu_task,'watt','Render',lab = 'Power Consumption (W)', n=0.5,c=1)
# Temperature
plot_hist(gpu_task,'temp','Render',lab = 'Power Consumption (W)', n=0.5,c=1)
# Temperature
plot_hist(gpu_task,'temp','Render',lab = 'Power Consumption (W)', n=0.2,c=1)
# Temperature
plot_hist(gpu_task,'temp','Render',lab = 'Power Consumption (W)', n=0.1,c=1)
# Temperature
plot_hist(gpu_task,'temp','Render',lab = 'Power Consumption (W)', n=0.1,c=0,e=1)
plot_hist(gpu_task,'temp','Tiling',lab = 'Power Consumption (W)', n=0.1,c=0,e=1)
plot_hist(gpu_task,'temp','Tiling',lab = 'Power Consumption (W)', n=0.2,c=0,e=1)
plot_hist = function(df, var_col,event,lab=var_col, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes_string(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = lab, y = "Frequency")
length(x)
}
plot_hist(gpu_task,'temp','Tiling',lab = 'Power Consumption (W)', n=0.1,c=0,e=1)
# Temperature
plot_hist(gpu_task,'temp','Render',lab = 'Power Consumption (W)', n=0.1,c=0,e=1)
# Look at start/stop times for each render and fit them into gpu stats based on timestamps
plot_hist = function(df, var_col,event,lab=var_col, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes_string(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(x = lab, y = "Frequency")
length(x[[var_col]])
}
cache("plot_hist")
# Temperature
plot_hist(gpu_task,'temp','Render',lab = 'Power Consumption (W)', n=0.1,c=0,e=1)
plot_hist(gpu_task,'temp','Tiling',lab = 'Power Consumption (W)', n=0.1,c=0,e=1)
View(gpu_task)
plot(gpu_task$temp)
plot_hist(gpu_task,'temp','Uploading',lab = 'Power Consumption (W)', n=0.1,c=0,e=1)
plot_hist(gpu_task,'temp','Render',lab = 'Power Consumption (W)', n=0.1,c=0,e=1)
