comp_gpu = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec')))
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12)
View(gpu_tile)
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x,y)
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x,y)
# Compare resource usage by tile (Q3b)
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(hostname)
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname')
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
# Split duration vector into 256 row vectors
x = split(gpu_tileb$duration, ceiling(seq_along(gpu_tile$duration)/256))
# Split duration vector into 256 row vectors
x = split(gpu_tile$duration, ceiling(seq_along(gpu_tile$duration)/256))
build_map = function(x,n){
df = data.frame()
for (i in length(x):1){
df = rbind(df, x[[i]])
}
names(df) = 1:n
return(df)
}
# Split duration vector into 256 row vectors
x = split(gpu_tile$duration, ceiling(seq_along(gpu_tile$duration)/256))
test = build_map(x,256)
# Create heatmap of tile render durations
heatmap(as.matrix(test), Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
build_map = function(x,n){
df = data.frame()
for (i in length(x):1){
df = rbind(df, x[[i]])
}
names(df) = 1:n
return(as.matrix(df))
}
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
# Seems to be a distinct clustering of mean rendering times into approximately 2 clusters around the mean (41.3s)
summary(comp_gpu$avg_dur)
comp_gpu = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
# Aggregate by mean render time
group_by(gpuSerial) %>%
summarise(avg_dur = mean(duration)) %>%
# Add index column for plotting
mutate(index = 1:1024)
# Seems to be a distinct clustering of mean rendering times into approximately 2 clusters around the mean (41.3s)
summary(comp_gpu$avg_dur)
test = quantile(comp_gpu$avg_dur, type = 6)
mean(gpu_tile$duration)
mean(comp_gpu$duration)
mean(comp_gpu$avg_dur)
plot(gpu_tile$duration)
# Compare GPU clusters by tile
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration > 60, duration,0))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$duration
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA,
labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration > 70, duration,0))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(gpuSerial) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration > 70, duration,0))
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration > 70, duration,0)) %>%
arrange(gpuSerial)
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$gpuSerial
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "Relative Rendering Duration by Tile")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118607, 1,0)) %>%
arrange(gpuSerial)
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118607, 1,100)) %>%
arrange(gpuSerial)
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118607, 1,1000)) %>%
arrange(gpuSerial)
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
# Compare GPU clusters by tile
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641, 1,1000)) %>%
arrange(gpuSerial)
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641, 1,1000)) %>%
arrange(gpuSerial)
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$avg_dur
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641, 1,1000)) %>%
arrange(gpuSerial)
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$duration
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641, 1,1000))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$duration
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641, 1,1000))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641, 1,0))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
sum(gpu_tile$gpuSerial)
sum(gpu_tile$outliers)
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641,10,1))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641,1,10))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(gpuSerial == 320118118641,1,1000))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration > 60,1,1000))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration > 41.3,1,1000))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration < 41.3,1,1000))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration > 70,1,1000))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
gpu_tile = app_task %>%
# Remove non-render tasks and all non level 12 observations (because there are basically none compared to level 12)
filter(eventName == 'Render', level == 12) %>%
# Aggregate by taskId computing duration of task using difftime (for each taskId)
group_by(hostname, taskId, eventName, x, y) %>%
summarise(duration = as.numeric(difftime(last(timestamp), first(timestamp), unit = 'sec'))) %>%
# Order df by row vectors to prepare for reordering tile durations by tile coordinates
arrange(x, y) %>%
# Join stripped down gpu dataset on hostname
left_join(gpu_ser, by = 'hostname') %>%
mutate(outliers = ifelse(duration > 60,1,1000))
# Drop unused variables (must be removed from dplyr pipe)
gpu_tile = gpu_tile[,-(1:3)]
variable = gpu_tile$outliers
# Split duration vector into 256 row vectors
x = split(variable, ceiling(seq_along(variable)/256))
map_matrix = build_map(x,256)
# Create heatmap of tile render durations
heatmap(map_matrix, Rowv=NA, Colv=NA, labRow=NA, labCol = NA, xlab = "")
cache("build_map")
