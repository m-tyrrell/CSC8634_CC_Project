grid.arrange(p1, p2, p3, p4, ncol=2)
View(gpu_t)
gpu_t$gpuSerial[1]
# Filter gpu_r dataset by unique gpu index number for plotting
gpu_t = gpu_r %>%
filter(id == 600) %>%
arrange(timestamp) %>%
filter(row_number() < 300)
# Plot each metric in the subsetted gpu_r dataset
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line() + labs( x = 'timestamp (s)', y = 'Consumption (W)')
p2 = ggplot(gpu_t, aes(timestamp, gpuTempC)) + geom_line() + labs(x = 'timestamp (s)', y = 'Temperature (C)')
p3 = ggplot(gpu_t, aes(timestamp, gpuUtilPerc)) + geom_line() + labs(x = 'timestamp (s)', y = 'CPU Usage (%)')
p4 = ggplot(gpu_t, aes(timestamp, gpuMemUtilPerc)) + geom_line() + labs(x = 'timestamp (s)', y = 'Memore Usage (%)')
# Plot grid of 4
grid.arrange(p1, p2, p3, p4, ncol=2)
gpu_t = gpu_r %>%
filter(id == 500) %>%
arrange(timestamp) %>%
filter(row_number() < 300)
# Plot each metric in the subsetted gpu_r dataset
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line() + labs( x = 'timestamp (s)', y = 'Consumption (W)')
p2 = ggplot(gpu_t, aes(timestamp, gpuTempC)) + geom_line() + labs(x = 'timestamp (s)', y = 'Temperature (C)')
p3 = ggplot(gpu_t, aes(timestamp, gpuUtilPerc)) + geom_line() + labs(x = 'timestamp (s)', y = 'CPU Usage (%)')
p4 = ggplot(gpu_t, aes(timestamp, gpuMemUtilPerc)) + geom_line() + labs(x = 'timestamp (s)', y = 'Memore Usage (%)')
# Plot grid of 4
grid.arrange(p1, p2, p3, p4, ncol=2)
# Actual s/n of gpu used for plot
gpu_t$gpuSerial[1]
# Plot each metric in the subsetted gpu_r dataset
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt, color='blue')) + geom_line() + labs( x = 'timestamp (s)', y = 'Consumption (W)')
# Plot each metric in the subsetted gpu_r dataset
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line(color='blue') + labs( x = 'timestamp (s)', y = 'Consumption (W)')
# Plot grid of 4
grid.arrange(p1, p2, p3, p4, ncol=2)
# Plot each metric in the subsetted gpu_r dataset
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line(color='#0066CC') + labs( x = 'timestamp (s)', y = 'Consumption (W)')
# Plot grid of 4
grid.arrange(p1, p2, p3, p4, ncol=2)
# Plot grid of 4
grid.arrange(p1, p2, p3, p4, ncol=2)
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line(color='#0066CC') + labs( x = 'timestamp (s)', y = 'Consumption (W)')
p2 = ggplot(gpu_t, aes(timestamp, gpuTempC)) + geom_line(color='#0066CC') + labs(x = 'timestamp (s)', y = 'Temperature (C)')
p3 = ggplot(gpu_t, aes(timestamp, gpuUtilPerc)) + geom_line(color='#0066CC') + labs(x = 'timestamp (s)', y = 'CPU Usage (%)')
p4 = ggplot(gpu_t, aes(timestamp, gpuMemUtilPerc)) + geom_line(color='#0066CC') + labs(x = 'timestamp (s)', y = 'Memore Usage (%)')
# Plot grid of 4
grid.arrange(p1, p2, p3, p4, ncol=2)
View(gpu)
View(app_task)
# Load each csv data file, correct timestamp using lubridate, convert factors
app_check = read.csv(file = "data/application-checkpoints.csv", colClasses = c('character','character','character','character','character','character'))
rm(app_check)
test = app_task %>%
group_by(hostname) %>%
summarise(n = n())
View(test)
test = app_task %>%
group_by(hostname, taskId) %>%
summarise(n = n())
hostname_task_n = app_task %>%
group_by(hostname, taskId) %>%
summarise(n = n())
summary(hostname_task_n)
hostname_task_n %>%
filter(n > 10)
hostname_task_n %>%
filter(n > 20)
hostname_task_n %>%
filter(n = 20)
hostname_task_n %>%
filter(n == 20)
# Actual s/n of gpu used for plot
gpu_t$gpuSerial[1]
# Actual s/n of gpu used for plot
as.int(gpu_t$gpuSerial[1])
# Actual s/n of gpu used for plot
as.character(gpu_t$gpuSerial[1])
# Filter gpu_r dataset by unique gpu index number for plotting
gpu_t = gpu_r %>%
filter(id == 500) %>%
arrange(timestamp) %>%
filter(timestamp < min(timestamp)+10)
# Plot each metric in the subsetted gpu_r dataset
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line(color='#0066CC') + labs( x = 'timestamp (s)', y = 'Consumption (W)')
p1
# Filter gpu_r dataset by unique gpu index number for plotting
gpu_t = gpu_r %>%
filter(id == 500) %>%
arrange(timestamp) %>%
filter(timestamp < min(timestamp)+1000)
# Plot each metric in the subsetted gpu_r dataset
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line(color='#0066CC') + labs( x = 'timestamp (s)', y = 'Consumption (W)')
p1
# Filter gpu_r dataset by unique gpu index number for plotting
gpu_t = gpu_r %>%
filter(id == 500) %>%
arrange(timestamp) %>%
filter(timestamp < min(timestamp)+500)
ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line(color='#0066CC') + labs( x = 'timestamp (s)', y = 'Consumption (W)')
# Filter gpu_r dataset by unique gpu index number for plotting
gpu_t = gpu_r %>%
filter(id == 500) %>%
arrange(timestamp) %>%
filter(timestamp < min(timestamp)+600)
ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line(color='#0066CC') + labs( x = 'timestamp (s)', y = 'Consumption (W)')
p1 = ggplot(gpu_t, aes(timestamp, powerDrawWatt)) + geom_line(color='#0066CC') + labs( x = 'timestamp (s)', y = 'Consumption (W)')
p2 = ggplot(gpu_t, aes(timestamp, gpuTempC)) + geom_line(color='#0066CC') + labs(x = 'timestamp (s)', y = 'Temperature (C)')
p3 = ggplot(gpu_t, aes(timestamp, gpuUtilPerc)) + geom_line(color='#0066CC') + labs(x = 'timestamp (s)', y = 'CPU Usage (%)')
p4 = ggplot(gpu_t, aes(timestamp, gpuMemUtilPerc)) + geom_line(color='#0066CC') + labs(x = 'timestamp (s)', y = 'Memore Usage (%)')
# Plot grid of 4
grid.arrange(p1, p2, p3, p4, ncol=2)
task_runtime_means = task_runtimes %>%
# Aggregate by event taking mean of all observations for each event
group_by(eventName) %>%
summarise(mean_dur = mean(duration), n = n())
View(task_runtime_means)
q2 = gpu %>%
select(4:7)
# Take sample of q2 index
x = sample(1:dim(q2)[1],2000)
# Slice q2 by sample
q2_samp = q2[x,]
pairs(q2_samp)
library(GGally)
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
ds$sex = as.factor(ifelse(ds$female==1, "female", "male"))
ds$housing = as.factor(ifelse(ds$homeless==1, "homeless", "housed"))
smallds = subset(ds, select=c("housing", "sex", "i1", "cesd"))
ggpairs(smallds, diag=list(continuous="density", discrete="bar"), axisLabels="show")
##### QUESTIONS
# Q1 Which tasks dominate runtimes?
task_runtime_means = task_runtimes %>%
# Aggregate by event taking mean of all observations for each event
group_by(eventName) %>%
summarise(mean_dur = mean(duration), n = n())
library(GGally)
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
ds$sex = as.factor(ifelse(ds$female==1, "female", "male"))
ds$housing = as.factor(ifelse(ds$homeless==1, "homeless", "housed"))
smallds = subset(ds, select=c("housing", "sex", "i1", "cesd"))
ggpairs(smallds, diag=list(continuous="density", discrete="bar"), axisLabels="show")
ggpairs(ds, columns=c("housing", "sex", "i1", "cesd"),
diag=list(continuous="density",   discrete="bar"), axisLabels="show")
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
# Q2 interplay between GPU Performance metrics
q2 = gpu %>%
select(4:7) %>%
summarise(watt = mean(powerDrawWatt), temp = mean(gpuTempC), cpu = mean(gpuUtilPerc), mem = mean(gpuMemUtilPerc))
q2
View(gpu)
View(q2_samp)
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_dotplot()
q2 = gpu %>%
select(4:7)
# Take sample of q2 index
x = sample(1:dim(q2)[1],200)
# Slice q2 by sample
q2_samp = q2[x,]
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_dotplot()
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point()
# Q2 interplay between GPU Performance metrics
q2 = gpu %>%
select(4:7)
# Take sample of q2 index
x = sample(1:dim(q2)[1],2000)
# Slice q2 by sample
q2_samp = q2[x,]
pairs(q2_samp)
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point()
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_quantile()
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_quantile() + stat_smooth()
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point() + stat_smooth()
ggplot(q2_samp, aes(gpuUtilPerc, gpuTempC)) + geom_point() + stat_smooth()
q2 = gpu %>%
select(4:7)
# Take sample of q2 index
x = sample(1:dim(q2)[1],10000)
# Slice q2 by sample
q2_samp = q2[x,]
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point() + stat_smooth()
ggplot(q2_samp, aes(gpuUtilPerc, gpuTempC)) + geom_point() + stat_smooth()
q2 = gpu %>%
select(4:7)
# Take sample of q2 index
x = sample(1:dim(q2)[1],100000)
# Slice q2 by sample
q2_samp = q2[x,]
ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point() + stat_smooth()
p6 = ggplot(q2_samp, aes(gpuUtilPerc, gpuTempC)) + geom_point() + stat_smooth()
p6
p7 = ggplot(q2_samp, aes(gpuUtilPerc, powerDrawWatt)) + geom_point() + stat_smooth()
p7
p8 = ggplot(q2_samp, aes(gpuUtilPerc, gpuMemUtilPerc)) + geom_point() + stat_smooth()
p8
p5 = ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point() + stat_smooth()
p5
p6
p7
pairs(q2_samp)
p10 = ggplot(q2_samp, aes(gpuTempC, gpuMemUtilPerc)) + geom_point() + stat_smooth()
p10
# Plot grid of 4
grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
p5 = ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point() + stat_smooth()
p6 = ggplot(q2_samp, aes(gpuUtilPerc, gpuTempC)) + geom_point() + stat_smooth()
p7 = ggplot(q2_samp, aes(gpuUtilPerc, powerDrawWatt)) + geom_point() + stat_smooth()
p8 = ggplot(q2_samp, aes(gpuUtilPerc, gpuMemUtilPerc)) + geom_point() + stat_smooth()
p9 = ggplot(q2_samp, aes(powerDrawWatt, gpuMemUtilPerc)) + geom_point() + stat_smooth()
p10 = ggplot(q2_samp, aes(gpuTempC, gpuMemUtilPerc)) + geom_point() + stat_smooth()
# Plot grid of 4
grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
p5
p5 = ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point(size=1) + stat_smooth()
p5
q2 = gpu %>%
select(4:7)
# Take sample of q2 index
x = sample(1:dim(q2)[1],1000)
# Slice q2 by sample
q2_samp = q2[x,]
p5 = ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point(size=0.5) + stat_smooth()
p5
p5 = ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point(size=0.5) + stat_smooth() + labs( x = 'Power (W)', y = 'Temperature (C)')
p6 = ggplot(q2_samp, aes(gpuUtilPerc, gpuTempC)) + geom_point(size=0.5) + stat_smooth()+ labs( x = 'GPU Usage (%)', y = 'Temperature (C)')
p7 = ggplot(q2_samp, aes(gpuUtilPerc, powerDrawWatt)) + geom_point(size=0.5) + stat_smooth() + labs( x = 'GPU Usage (%)', y = 'Power (W)')
p8 = ggplot(q2_samp, aes(gpuUtilPerc, gpuMemUtilPerc)) + geom_point(size=0.5) + stat_smooth() + labs( x = 'GPU Usage (%)', y = 'Memory Usage (%)')
p9 = ggplot(q2_samp, aes(powerDrawWatt, gpuMemUtilPerc)) + geom_point(size=0.5) + stat_smooth() + labs( x = 'Power (W)', y = 'Memory Usage (%)')
p10 = ggplot(q2_samp, aes(gpuTempC, gpuMemUtilPerc)) + geom_point(size=0.5) + stat_smooth() + labs( x = 'Temperature (C)', y = 'Memory Usage (%)')
# Plot grid of 4
test = grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
p5 = ggplot(q2_samp, aes(powerDrawWatt, gpuTempC)) + geom_point(size=0.25) + stat_smooth() + labs( x = 'Power (W)', y = 'Temperature (C)')
p6 = ggplot(q2_samp, aes(gpuUtilPerc, gpuTempC)) + geom_point(size=0.25) + stat_smooth()+ labs( x = 'GPU Usage (%)', y = 'Temperature (C)')
p7 = ggplot(q2_samp, aes(gpuUtilPerc, powerDrawWatt)) + geom_point(size=0.25) + stat_smooth() + labs( x = 'GPU Usage (%)', y = 'Power (W)')
p8 = ggplot(q2_samp, aes(gpuUtilPerc, gpuMemUtilPerc)) + geom_point(size=0.25) + stat_smooth() + labs( x = 'GPU Usage (%)', y = 'Memory Usage (%)')
p9 = ggplot(q2_samp, aes(powerDrawWatt, gpuMemUtilPerc)) + geom_point(size=0.25) + stat_smooth() + labs( x = 'Power (W)', y = 'Memory Usage (%)')
p10 = ggplot(q2_samp, aes(gpuTempC, gpuMemUtilPerc)) + geom_point(size=0.25) + stat_smooth() + labs( x = 'Temperature (C)', y = 'Memory Usage (%)')
# Plot grid of 4
test = grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
# Plot grid of 4
test = grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
ggsave('graphs/pairs',test)
ggsave('graphs/pairs.pdf',p10)
pdf(filename="graphs/test.pdf")
grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
dev.off()
pdf(filename="test.pdf")
grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
dev.off()
grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
dev.copy(jpeg,filename="plot.jpg")
t = grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
ggsave(filename="ab.pdf", plot=t)
t = grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
ggsave(filename="ab.pdf", plot=t)
p11 = grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
ggsave(filename="graphs/p11.pdf", plot=p11)
p11 = grid.arrange(p5, p6, p7, p8, p9, p10, ncol=3)
ggsave(filename="graphs/p11.png", plot=p11)
source('~/.active-rstudio-document', echo=TRUE)
tblFun(task_runtime_means)
task_runtime_means
# Q1 Which tasks dominate runtimes?
task_runtime_means = task_runtimes %>%
# Aggregate by event taking mean of all observations for each event
group_by(eventName) %>%
summarise('mean duration (s)' = mean(duration), n = n())
View(task_runtime_means)
# Q1 Which tasks dominate runtimes?
task_runtime_means = task_runtimes %>%
# Aggregate by event taking mean of all observations for each event
group_by(eventName) %>%
summarise('mean duration (s)' = mean(duration), n = n()) %>%
rename(eventName = 'Event Name')
View(task_runtime_means)
# Q1 Which tasks dominate runtimes?
task_runtime_means = task_runtimes %>%
# Aggregate by event taking mean of all observations for each event
group_by(eventName) %>%
summarise('mean duration (s)' = mean(duration), n = n()) %>%
rename('Event Name' = eventName)
View(task_runtime_means)
task_runtime_means$`mean duration (s)` = round(task_runtime_means$`mean duration (s)`,2)
View(task_runtime_means)
p12 = plot_hist(task_runtimes,'duration','Render',lab = 'Execution Time (s)',n=0.5,c=1)
p13 = plot_hist(task_runtimes,'duration','Tiling',lab = 'Execution Time (s)',n=0.005,c=1)
p14 = plot_hist(task_runtimes,'duration','Uploading',lab = 'Execution Time (s)',colour='#0066CC',d=0.9,f=0.95,h=0.85)
p15 = plot_hist(task_runtimes,'duration','Saving Config',lab = 'Execution Time (s)',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
p16 = grid.arrange(p12, p13, p14, p15, ncol=4)
p16 = grid.arrange(p12, p13, p14, p15, ncol=2)
p16 = grid.arrange(p12, p13, ncol=1)
p17 = grid.arrange(p14, p15, ncol=1)
# Execution Time
p12 = plot_hist(task_runtimes,'duration','Render',lab = 'Execution Time (s)',n=0.5,c=1)
p13 = plot_hist(task_runtimes,'duration','Tiling',lab = 'Execution Time (s)',n=0.005,c=1)
p16 = grid.arrange(p12, p13, ncol=1)
plot_hist = function(df, var_col,event,lab=var_col, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes_string(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(title = event, x = lab, y = "Frequency (n)")
# length(x[[var_col]])
}
cache("plot_hist")
p12 = plot_hist(task_runtimes,'duration','Render',lab = 'Execution Time (s)',n=0.5,c=1)
p13 = plot_hist(task_runtimes,'duration','Tiling',lab = 'Execution Time (s)',n=0.005,c=1)
p16 = grid.arrange(p12, p13, ncol=1)
plot_hist = function(df, var_col,event,title=event,lab=var_col, n=0.1, colour = 'white', rnd=2, a=0,b=1,c=0,d=1,e=0,f=1,g=0,h=1,i=1,j=1){
# Filter as per selected event
x = df %>%
filter(eventName == event)
# Setup histogram using ggplot
comp_hist_rend = ggplot(x, aes_string(var_col)) +
geom_histogram(binwidth = n, fill=I("#0066CC"), col=I(colour), alpha=I(0.8))
# Get ymax of count to orientate annotations
ymax = max(ggplot_build(comp_hist_rend)$data[[1]]$count)
# Add vlines and annotations
comp_hist_rend +  geom_vline(xintercept = min(x[[var_col]]), color = 'darkgreen', linetype = 'dotdash') +
annotate("text", x=min(x[[var_col]]), y=ymax*b, label= paste("Min",round(min(x[[var_col]]),rnd)), size=2.5, hjust=a) +
# mean
geom_vline(xintercept = mean(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=mean(x[[var_col]]), y=ymax*d, label= paste("Arth. Mean",round(mean(x[[var_col]]),rnd)), size=2.5, hjust=c) +
# median
geom_vline(xintercept = median(x[[var_col]]), color = 'purple', linetype = 'dotdash') +
annotate("text", x=median(x[[var_col]]), y=ymax*f, label= paste("Median",round(median(x[[var_col]]),rnd)), size=2.5, hjust=e) +
# 95th percentile
geom_vline(xintercept = quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], color = 'orange',linetype = 'dashed') +
annotate("text", x=quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20], y=ymax*h, label= paste("95th Percentile",round(quantile(x[[var_col]], probs = seq(0, 1, 0.05), type = 6)[20],rnd)), size=2.5, hjust=g) +
# max
geom_vline(xintercept = max(x[[var_col]]), color = 'red', linetype = 'dotdash') +
annotate("text", x=max(x[[var_col]]), y=ymax*j, label= paste("Max",round(max(x[[var_col]]),rnd)), size=2.5, hjust=i) +
# Labels
labs(title = title, x = lab, y = "Frequency (n)")
# length(x[[var_col]])
}
cache("plot_hist")
plot_hist(task_runtimes,'duration','Render',lab = 'Execution Time (s)',n=0.5,c=1)
p13 = plot_hist(task_runtimes,'duration','Tiling',lab = 'Execution Time (s)',n=0.005,c=1)
p16 = grid.arrange(p12, p13, ncol=1)
cache(p12)
cache('p12')
cache('p13')
p15 = plot_hist(task_runtimes,'duration','Uploading',lab = 'Execution Time (s)',colour='#0066CC',d=0.9,f=0.95,h=0.85)
p16 = plot_hist(task_runtimes,'duration','Saving Config',lab = 'Execution Time (s)',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
p17 = grid.arrange(p15, p16, ncol=1)
cache('p17')
cache('p14')
cache('p5','p6')
cache('p5')
cache('p6')
cache('p7')
cache('p8')
cache('p9')
cache('p10')
p14 = plot_hist(task_runtimes,'duration','Uploading',lab = 'Execution Time (s)',colour='#0066CC',d=0.9,f=0.95,h=0.85)
p15 = plot_hist(task_runtimes,'duration','Saving Config',lab = 'Execution Time (s)',colour='#0066CC',n=0.0001,rnd=4,d=0.95,f=0.9,h=0.85)
cache('p14')
cache('p15')
# Power Consumption
plot_hist(gpu_task,'watt','Render',lab = 'Power Consumption (W)', n=0.5,c=1)
plot_hist(gpu_task,'watt','Tiling',lab = 'Power Consumption (W)', n=0.2,c=0,e=1)
plot_hist(gpu_task,'watt','Uploading',lab = 'Power Consumption (W)', n=0.2,c=1)
plot_hist(gpu_task,'watt','Saving Config',lab = 'Power Consumption (W)', n=0.2,c=0)
# Temperature
plot_hist(gpu_task,'temp','Render',lab = 'Temperature (C)', n=0.1,c=0,e=1)
plot_hist(gpu_task,'temp','Tiling',lab = 'Temperature (C)', n=0.1,c=0,e=1)
plot_hist(gpu_task,'temp','Uploading',lab = 'Temperature (C)', n=0.1,c=0,e=1)
plot_hist(gpu_task,'temp','Saving Config',lab = 'Temperature (C)', n=0.1,c=1,e=0)
p16 = plot_hist(gpu_task,'watt','Render',lab = 'Power Consumption (W)', n=0.5,c=1)
p17 = plot_hist(gpu_task,'watt','Tiling',lab = 'Power Consumption (W)', n=0.2,c=0,e=1)
cache('p16')
cache('p17')
grid.arrange(p16, p17, ncol=1)
p18 = plot_hist(gpu_task,'watt','Uploading',lab = 'Power Consumption (W)', n=0.2,c=1)
p19 = plot_hist(gpu_task,'watt','Saving Config',lab = 'Power Consumption (W)', n=0.2,c=0)
cache('p18')
cache('p19')
grid.arrange(p18, p19, ncol=1)
p20 = plot_hist(gpu_task,'temp','Render',lab = 'Temperature (C)', n=0.1,c=0,e=1)
p21 = plot_hist(gpu_task,'temp','Tiling',lab = 'Temperature (C)', n=0.1,c=0,e=1)
cache('p20')
cache('p21')
grid.arrange(p20, p21, ncol=1)
# CPU
p22 = plot_hist(gpu_task,'cpu','Render',lab = 'CPU (%)', n=0.2,c=1,e=0)
# Memory
p23 = plot_hist(gpu_task,'mem','Render',lab = 'Memory (%)', n=0.2,c=1,e=0)
cache('p22')
cache('p23')
grid.arrange(p22, p23, ncol=1)
# CPU
p22 = plot_hist(gpu_task,'cpu','Render',lab = 'CPU (%)', n=0.3,c=1,e=0)
grid.arrange(p22, p23, ncol=1)
cache('p22')
# Memory
p23 = plot_hist(gpu_task,'mem','Render',lab = 'Memory (%)', n=0.2,c=1,e=0,h=0.95)
# CPU
p22 = plot_hist(gpu_task,'cpu','Render',lab = 'CPU (%)', n=0.3,c=1,e=0,h=0.95)
ache('p22')
cache('p23')
cache('p22')
View(task_runtimes)
# CPU
p22 = plot_hist(gpu_task,'cpu','Render',lab = 'CPU (%)', n=0.3,c=1,e=0,h=0.9)
# Memory
p23 = plot_hist(gpu_task,'mem','Render',lab = 'Memory (%)', n=0.2,c=1,e=0,h=0.9)
cache('p22')
cache('p23')
x = task_runtimes %>%
filter(eventName == 'Uploading')
qqnorm(x$duration, pch = 1, frame = FALSE)
qqline(x$duration, col = "steelblue", lwd = 2)
# Test for normality
x = task_runtimes %>%
filter(eventName == 'Saving Config')
qqnorm(x$duration, pch = 1, frame = FALSE)
qqline(x$duration, col = "steelblue", lwd = 2)
x = task_runtimes %>%
filter(eventName == 'Tiling')
qqnorm(x$duration, pch = 1, frame = FALSE)
qqline(x$duration, col = "steelblue", lwd = 2)
View(gpu_task)
y = gpu_task %>%
filter(eventName == 'Tiling')
qqnorm(y$watt, pch = 1, frame = FALSE)
qqline(y$watt, col = "steelblue", lwd = 2)
qqnorm(y$temp, pch = 1, frame = FALSE)
qqline(y$temp, col = "steelblue", lwd = 2)
# Memory
p23 = plot_hist(gpu_task,'mem','Render',lab = 'Memory Usage (%)', n=0.2,c=1,e=0,h=0.9)
# CPU
p22 = plot_hist(gpu_task,'cpu','Render',lab = 'GPU Usage (%)', n=0.3,c=1,e=0,h=0.9)
cache('p22')
cache('p23')
qqnorm(y$cpu, pch = 1, frame = FALSE)
qqline(y$cpu, col = "steelblue", lwd = 2)
qqnorm(y$mem, pch = 1, frame = FALSE)
qqline(y$mem, col = "steelblue", lwd = 2)
y = gpu_task %>%
filter(eventName == 'Render')
qqnorm(y$mem, pch = 1, frame = FALSE)
qqline(y$mem, col = "steelblue", lwd = 2)
# Compare resource usage by tile (Q3b)
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
heat_vis('Render','duration',caption='on')
grid.arrange(p20, p22, p23, ncol=1)
# Temperature
p20 = plot_hist(gpu_task,'temp','Render',lab = 'Temperature (C)', n=0.15,c=0,e=1)
cache('p20')
p20 = plot_hist(gpu_task,'temp','Render',lab = 'Temperature (C)', n=0.15,c=0,e=1)
cache('p20')
p21 = plot_hist(gpu_task,'cpu','Render',lab = 'GPU Usage (%)', n=0.3,c=1,e=0,h=0.9)
cache('p21')
p22 = plot_hist(gpu_task,'mem','Render',lab = 'Memory Usage (%)', n=0.2,c=1,e=0,h=0.9)
cache('p22')
grid.arrange(p20, p21, p22, ncol=1)
heat_vis('Render','watt',caption='on')
# Compare resource usage by tile (Q3b)
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
heat_vis('Render','duration',caption='on')
heat_vis('Render','temp',caption='on')
heat_vis('Render','gpu',caption='on')
heat_vis('Render','cpu',caption='on')
heat_vis('Render','mem',caption='on')
p23 = heat_vis('Render','duration',caption='on')
p24 = heat_vis('Render','watt',caption='on')
p25 = heat_vis('Render','temp',caption='on')
p26 = heat_vis('Render','cpu',caption='on')
p27 = heat_vis('Render','mem',caption='on')
grid.arrange(p23, p24, p25, p26, ncol=2)
ggsave(filename = 'graphs/p23',p23)
p23 = heat_vis('Render','duration',caption='on')
ggsave(filename = 'graphs/p23',p23)
p20 = plot_hist(gpu_task,'temp','Render',lab = 'Temperature (C)', n=0.15,c=0,e=1)
p21 = plot_hist(gpu_task,'temp','Tiling',lab = 'Temperature (C)', n=0.1,c=0,e=1)
cache('p20')
cache('p21')
grid.arrange(p20, p21, ncol=1)
# Memory
p23 = plot_hist(gpu_task,'mem','Render',lab = 'Memory Usage (%)', n=0.2,c=1,e=0,h=0.9)
# CPU
p22 = plot_hist(gpu_task,'cpu','Render',lab = 'GPU Usage (%)', n=0.3,c=1,e=0,h=0.9)
cache('p22')
cache('p23')
grid.arrange(p22, p23, ncol=1)
grid.arrange(p22, p23, ncol=1)
grid.arrange(p20, p21, ncol=1)
heat_vis('Render','duration',caption='on')
ggsave(filename = 'graphs/p23')
# Compare resource usage by tile (Q3b)
# Filter and aggregate joined app_check/taskxy to display only relevant variables/tasks
p24 = heat_vis('Render','duration',caption='on')
cache('p24')
