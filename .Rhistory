geom_point() +
stat_smooth(aes(colour = drv))
ggplot(data=mpg, aes(x=displ, y=hwy)) +
geom_point() +
stat_smooth(aes(colour = drv)) +
labs(x = "Displacement", y = "Highway")
ggplot(data=mpg, aes(x=displ, y=hwy)) +
geom_point() +
stat_smooth(aes(colour = drv)) +
labs(x = "Displacement", y = "Highway", title = "MPG Data")
mpg$drv[mpg$drv == "4"]
mpg$drv[mpg$drv == "4"] = "4wd"
View(mpg)
mpg$drv[mpg$drv == "f"] = "Front"
mpg$drv[mpg$drv == "r"] = "Rear"
ggplot(data=mpg, aes(x=displ, y=hwy)) +
geom_point() +
stat_smooth(aes(colour = drv)) +
labs(x = "Displacement", y = "Highway", title = "MPG Data")
class(mpg$drv)
mpg$drv = factor(mpg$drv, levels = c("Front", "Rear", "4wd"))
ggplot(data=mpg, aes(x=displ, y=hwy)) +
geom_point() +
stat_smooth(aes(colour = drv)) +
labs(x = "Displacement", y = "Highway", title = "MPG Data")
data("aphids")
Str(aphids)
str(aphids)
summary(aphids$Nitrogen)
table(aphids$Nitrogen)
geom_point()
ggplot(aphids, aes(x=Time, y=Aphids)) +
geom_point()
ggplot(aphids, aes(x=Time, y=Aphids)) +
geom_line()
View(aphids)
ggplot(aphids, aes(x=Time, y=Aphids)) +
geom_line() +
facet_grid(Block ~ .)
ggplot(aphids, aes(x=Time, y=Aphids)) +
geom_line() +
facet_grid(Block ~ Water)
aphids$Water <= factor(aphids$Water, levels = c("Low", "Medium", "High"))
aphids$Water <- factor(aphids$Water, levels = c("Low", "Medium", "High"))
ggplot(aphids, aes(x=Time, y=Aphids)) +
geom_line() +
facet_grid(Block ~ Water)
View(aphids)
ggplot(aphids, aes(x=Time, y=Aphids)) +
geom_line() +
facet_grid(Block ~ Nitrogen)
ggplot(aphids, aes(x=Time, y=Aphids)) +
geom_line() +
facet_grid(Nitrogen ~ Water)
ggplot(aphids, aes(x=Time, y=Aphids, colour = Block)) +
ggplot(aphids, aes(x=Time, y=Aphids, colour = Block)) +
geom_line() +
facet_grid(Nitrogen ~ Water)
ggplot(aphids, aes(x=Time, y=Aphids, colour = Block)) +
geom_line() +
facet_grid(Nitrogen ~ Water)
ggplot(aphids, aes(x=Time, y=Aphids, colour = factor(Block))) +
geom_line() +
facet_grid(Nitrogen ~ Water)
ggplot(aphids, aes(x=Time, y=Aphids, colour = factor(Block))) +
geom_line() +
facet_grid(Nitrogen ~ Water) +
geom_point()
View(Beauty)
ggplot(data = Beauty) +
geom_bar(aes(x=gender, fill=factor(dec)))
ggplot(data = Beauty) +
geom_bar(aes(x=gender)) +
facet_grid(. ~ dec)
ggplot(data = Beauty) +
geom_bar(aes(x=gender)) +
facet_wrap(. ~ dec)
ggplot(data = Beauty) +
geom_bar(aes(x=gender)) +
facet_(~ dec)
ggplot(data = Beauty) +
geom_bar(aes(x=gender)) +
facet_wrap(~ dec)
ggplot(data = Beauty) +
geom_bar(aes(x=gender)) +
facet_grid(. ~ dec)
ggplot(data = Beauty, margins = c(1,2,2,1)) +
geom_bar(aes(x=gender)) +
facet_grid(. ~ dec)
ggplot(data = Beauty, margins = c(10,20,20,10)) +
geom_bar(aes(x=gender)) +
facet_grid(. ~ dec)
ggplot(data = Beauty, scales='free_x') +
geom_bar(aes(x=gender)) +
facet_grid(. ~ dec)
class(Beauty$dec)
ggplot(data = Beauty, aes(x = gender, fill = factor(dec))) +
geom_bar() +
facet_grid(. ~ dec)
ggplot(data = Beauty, aes(x = gender)) +
geom_bar() +
facet_grid(. ~ dec)
ggplot(data = Beauty, aes(x = gender)) +
geom_bar() +
facet_grid(. ~ dec, margins = TRUE)
ggplot(data = Beauty, aes(x = gender)) +
geom_bar() +
facet_grid(. ~ dec, margins = TRUE)
ggplot(data = Beauty, aes(x = gender)) +
geom_bar() +
facet_grid(. ~ dec, margins = TRUE, scales = "free_x")
data(google)
plot(google, Rank, Users)
plot(google, google$Rank, google$Users)
View(google)
ggplot(google, aes(x=Users, y=Rank)) +
geom_point()
ggplot(google, aes(y=Users, x=Rank)) +
geom_point()
ggplot(google, aes(y=Users, x=Rank)) +
geom_point() +
scale_y_log10()
install.packages("nclSLR", repos = "http://R-Forge.R-project.org")
library(nclSLR)
data("heptathlon")
class(heptathlon)
View(heptathlon)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data("prostate")
View(prostrate)
View(prostate)
table(prostrate$svi)
table(prostate$svi)
table(prostate$gleason)
?prostate
plot(prostate$svi, prostate$gleason)
plot(prostate$gleason, prostate$svi)
data(nci)
dim(nci)
heatmap(nci, Rowv = NA, Colv = NA, labRow = NA)
rownames(nci)
colMeans(heptathlon)
class(colMeans(heptathlon))
var(heptathlon)
apply(heptathlon, 2, var)
cor(heptathlon)
colnames(prostate)
X <- prostate[,1:2]
View(X)
plot(X)
x = seq(-5,5,2)
set.seed(1)
y = rnorm(length(x), 1 + 3*x, 2)
plot(x,y)
lsq_fit = lm(y ~ x)
plot(lsq_fit)
names(lsq_fit)
names(lsq_fit)[1]
lsq_fit["coefficients"]
lsq_fit["coefficients"][1]
lsq_fit["coefficients"][1][1]
lsq_fit["coefficients"][[1]]
lsq_fit["coefficients"][1][1]
lsq_fit["coefficients"][1][1][1]
lsq_fit["coefficients"]
lsq_fit$coefficients
lsq_fit$coefficients[1]
lsq_fit$coefficients[[1]]
x = rnorm(100,3,2)
m = mean(x)
s = sd(x)
y = lapply(x, (x-m)/sd)
y = apply(x, (x-m)/sd)
y = numeric()
y
for(i in x){}
for(i in x){ y = (x-m)/sd}
class(sd)
for(i in x){ y = (x-m)/s}
y
y = lapply(x, (x-m)/s)
y = sapply(x, function(i) (i-m)/s)
y
(x-means(x))/sd(x)
(x-mean(x))/sd(x)
x <- filter(prostate, gleason == 7 & Ipsa > 2.5)
x <- filter(prostate, gleason == 7 & lpsa > 2.5)
View(x)
x <- filter(prostate, gleason >= 8 | age > 65)
View(x)
dim(filter(prostate, gleason >= 8 | age > 65))
dim(filter(prostate, gleason == 7 & lpsa > 2.5))
x <- filter(prostate, gleason == 6 & lcavol < 1)
View(x)
x <- filter(prostate, gleason == 6)
View(x)
x <- filter(prostate, gleason == 6 & lcavol > 1)
View(x)
x <- filter(prostate, gleason == 6 & lcavol < 1)
View(x)
x <- filter(prostate, gleason == 6 & lcavol <= 1)
View(x)
x <- filter(prostate, gleason == 6 & lcavol < 1)
View(x)
mean(x$lpsa)
vector(7)
y <- vector(7)
?vector
vector("numeric", 7)
data("heptathlon")
x <- heptathlon
x
x$H100M = max(x$H100M) - x$H100M
x
x$R200M = max(x$R200M) - x$R200M
x$R800M = max(x$R800M) - x$R800M
S = var(x)
S
s_sq = diag(S)
tot_var = sum(s_sq)
tot_var
pca1 = prcomp(x=x)
pca1
pca1$rotation
pca1$sdev
summary(pca1)
y <- summary(pca1)
y
y$sdev
y$center
plot(y)
pca2 <- prcomp(x=x, scale = TRUE)
pca2
summary(pca2)
library(nclSLR)
data("USArrests", package = "nclSLR")
View(USArrests)
USArrestsData = as.matrix(USArrests[,1:4])
View(USArrestsData)
USRegions = USArrests[,5]
pairs(USArrestsData)
colMeans(USArrestsData)
apply(USArrestsData, 2, var)
var(USArrestsData)
diar(var(USArrestsData))
diag(var(USArrestsData))
pca_arr1 = prcomp(USArrestsData, scale=TRUE)
pca_arr1
pca_arr1$x
summary(pca_arr1)
plot(pca_arr1, type = "l", main="")
title(xlab = "Component Number")
plot(pca_arr1$x[,1], pca_arr1$x[,2], xlab="First PC", ylab="Second PC")
text(pca_arr1$[,1], pca_arr1$x[,2], labels=rownames(USArrests), cex=0.7, pos=3, col="darkgrey")
text(pca_arr1$x[,1], pca_arr1$x[,2], labels=rownames(USArrests), cex=0.7, pos=3, col="darkgrey")
head(USRegions)
View(USRegions)
UsRegion_Labels = as.numeric(USRegions)
head(UsRegion_Labels)
plot(pca_arr1$x[,1], pca_arr1$x[,2], col=USRegion_Labels, pch=USRegion_Labels, xlab="First PC", ylab="Second PC")
plot(pca_arr1$x[,1], pca_arr1$x[,2], col=UsRegion_Labels, pch=UsRegion_Labels, xlab="First PC", ylab="Second PC")
text(pca_arr1$x[,1], pca_arr1$x[,2], labels=rownames(USArrests), cex=0.7, pos=3, col="darkgrey")
text(pca_arr1$x[,1], labels=rownames(USArrests), cex=0.7, pos=3, col="darkgrey")
plot(pca_arr1$x[,1], col=UsRegion_Labels, pch=UsRegion_Labels, xlab="First PC", ylab="Second PC")
library(ElemStatLearn)
data(zip.train)
View(zip.train)
dim(zip.train)
?zip.train
View(names(zip.train))
str(zip.train)
row5_digit = vector2image(zip.train[5,-1])
source('~/PCA.R')
source('~/PCA.R')
row5_digit = vector2image(zip.train[5,-1])
row5_digit
zip.train[5,1]
image(t(row5_digit), col=grey(31:0/31), xlab = "", ylab = "")
image(t(row5_digit), col=grey(0:31/31), xlab = "", ylab = "")
image(t(row5_digit), col=grey(10:0/10), xlab = "", ylab = "")
image(t(row5_digit), col=grey(31:0/31), xlab = "", ylab = "")
image(t(row5_digit), col=grey(10:0/10), xlab = "", ylab = "")
image(t(row5_digit), col=grey(3:0/3), xlab = "", ylab = "")
image(t(row5_digit), col=grey(2:0/2), xlab = "", ylab = "")
threes = filter(zip.train, zip.train[,1] == 3)
class(zip.train)
threes = zip.train[zip.train[,1] == 3,-1]
View(threes)
dim(threes)
mean_threes = colMeans(threes)
image(t(vector2image(mean_threes)), col=grey(31:0/31), xlab = "", ylab = "")
image(t(vector2image(mean_threes)), col=grey(310:0/310), xlab = "", ylab = "")
image(t(vector2image(mean_threes)), col=grey(31000:0/31000), xlab = "", ylab = "")
var(threes)
var_three = var(threes)
dim(var_three)
image(t(matrix2image(var_three)), col=grey(31:0/31), xlab = "", ylab = "")
X = zip.train[,-1]
pca_zip = prcomp(X, scale=FALSE)
summary(pca_zip)
prop_var = pca_zip$sdev^2
head(prop_var)
cumul_prop_var = cumsum(prop_var)
head(cumul_prop_var)
which(cumul_prop_var>=0.7)[1]
prop_var = pca_zip$sdev^2/sum(pca_zip$sdev^2)
head(prop_var)
which(prop_var>=0.7)
cumul_prop_var = cumsum(prop_var)
cumul_prop_var
which(cumul_prop_var>=0.7)
which(cumul_prop_var>=0.7)[1]
plot(pca_zip, npcs=30, type="lines", main="")
plot(pca_zip, npcs=10, type="lines", main="")
cumul_prop_var[6]
S = var(X)
sum(diag(S))
Y = pca_zip$x
T = var(Y)
sum(diag(T))
Y_6 = Y[,1:6]
T_6 = var(Y_6)
sum(diag(T_6))
L = pca_zip$rotation
X_6 = Y_6 %*% t(L[,1:6])
S_6 = var(X_6)
par(mfrow=c(1,2))
image(t(matrix2image(S)), col=grey(31:0/31), xlab="", ylab="")
image(t(matrix2image(S_6)), col=grey(31:0/31), xlab="", ylab = "")
data("airpollution", package = nclSLR)
library(nclSLR)
data("airpollution", package = nclSLR)
data("airpollution")
dim(airpollution)
head(airpollution)
?airpollution
pairs(airpollution)
plot(airpollution$PM2, airpollution$PMEAN)
air2 = airpollution
max(air2$PM2)
air2 = filter(airpollution, rownames(airpollution) != "JERSEYCITY")
View(air2)
air2
head(air2)
head(airpollution)
rownames(airpollution)
air2 = filter(airpollution, rownames(airpollution) != "JERSEYC")
dim(air2)
plot(air2$PMEAN,air2$PM2)
air = airpollution
var(air)
pca_air = prcomp(air, scale = TRUE)
pca_air
summary(pca_air)
plot(pca_air$x[,1], pca_air$x[,2])
sum(diag(air))
sum(diag(pca_air))
diag(var(air))
sum(diag(var(air)))
dim(threes)
var(threes)
dim(var(threes))
diag(var(threes))
sum(diag(var(threes)))
trace(var(threes))
ax <- diag(var(threes))
plot(ax)
par(mfrow=c(1,1))
plot(ax)
plot(ax, type="l")
View(var(threes))
image(t(matrix2image(var_three)), col=grey(31:0/31), xlab = "", ylab = "")
image(t(matrix2image(var_three)), col=grey(15:0/15), xlab = "", ylab = "")
image(t(matrix2image(var_three)), col=grey(5:0/5), xlab = "", ylab = "")
summary(pca_zip)
dim(airpollution)
View(pca_arr1)
View(pca_zip)
View(pca_zip)
rm(pca_zip)
rm(list=())
list=()
list()
lm()
list(all)
ls()
rm(list=(ls))
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
titanic_train = read.csv(file = "~/Desktop/all/test.csv")
View(titanic_train)
View(titanic_train)
titanic_test = read.csv(file = "~/Desktop/all/test.csv")
View(titanic_test)
titanic_train = read.csv(file = "~/Desktop/all/train.csv")
View(titanic_train)
sum(titanic_train$Survived)
mean(titanic_train$Survived)
table(titanic_train$Pclass, titanic_train$Survived)
tblFun <- function(x){
tbl <- table(x)
res <- cbind(tbl,round(prop.table(tbl)*100,2))
colnames(res) <- c('Count','Percentage')
res
}
tblFun(table(titanic_train$Pclass, titanic_train$Survived))
View(titanic_train)
x = read.csv(file = "Desktop/DS_Projects/CSC8635_ML_Asg/data/train.csv")
1 + 1
stats = fromJSON("Desktop/DS_Projects/CSC_Cloud_Asg/data/benchcollection.json")
library(RJSONIO)
stats = fromJSON("Desktop/DS_Projects/CSC_Cloud_Asg/data/benchcollection.json")
##### Parsing function
parse_json = function(json, id){
df <- data.frame(rx_bytes=double(),
tx_bytes=double(),
mem_usage=double(),
cpu_tot=double(),
stringsAsFactors=FALSE)
for (j in 1:length(stats)){
if(stats[[j]][['id']] == id){
service = stats[[j]][['jsonStats']]
rx_bytes = numeric()
tx_bytes = numeric()
mem_usage = numeric()
cpu_tot = numeric()
for (i in service){
rx_bytes = c(rx_bytes, i[['network']][['tx_bytes']])
tx_bytes = c(tx_bytes, i[['network']][['rx_bytes']])
mem_usage = c(mem_usage, i[['memory']][['usage']])
cpu_tot = c(cpu_tot, i[['cpu']][['usage']][['total']])
}
x = data.frame(rx_bytes,tx_bytes,mem_usage,cpu_tot)
df = rbind(df,x)
}
}
return(df)
}
#Call parsing functions
web1 = parse_json(stats, "27834e482f3ed466b841d959ef2fcd1eeac6704addab367b866b5c5f988b6520")
web2 = parse_json(stats, "05bf2fabd3fcf0185c63217a8fd68e3a25915434eca62a60ed6c384bfc96156b")
file <- "~/Desktop/_chat.txt"
con <- file(description=file, open="r")
## Hopefully you know the number of lines from some other source or
com <- paste("wc -l ", file, " | awk '{ print $1 }'", sep="")
com
n <- system(command=com, intern=TRUE)
n
df = df()
df = data.frame()
for(i in 1:n) {
tmp <- scan(file=con, nlines=1, quiet=TRUE)
df = rbind(tmp)
## do something on a line of data
}
library(ProjectTemplate)
getwd()
setwd("Desktop/DS_Projects/CSC8634_CC_Project/")
load.project()
View(app_check)
View(gpu)
max(gpu$powerDrawWatt)
min(gpu$powerDrawWatt)
unique(gpu$gpuSerial)
length(unique(gpu$gpuSerial))
length(unique(gpu$hostname))
test = parse_date_time(gpu$timestamp, "S")
test = filter(gpu, gpuSerial == 323217055910)
test = filter(gpu, gpu$gpuSerial == 323217055910)
rm(test)
str(gpu)
test = gpu %>%
filter(gpu, gpuSerial == 323217055910)
library(dplyr)
test = gpu %>%
filter(gpu, gpuSerial == 323217055910)
length(gpu)
length(gpu$gpuSerial)
t = filter(gpu, gpuSerial == 323217055910)
ggplot(gpu, aes(gpuSerial)) + geom_histogram(binwidth = 0.1, fill=I("#0066CC"), col=I("white"), alpha=I(0.8)) +
labs(x = "Step", y = "Count", title = "Histogram: Last Step Completed") +
scale_x_continuous(breaks = round(seq(min(gpu$gpuSerial), max(gpu$gpuSerial), by = 0.1),1)) +
theme(text = element_text(size=10))
library(ggplot2)
ggplot(gpu, aes(gpuSerial)) + geom_histogram(binwidth = 0.1, fill=I("#0066CC"), col=I("white"), alpha=I(0.8)) +
labs(x = "Step", y = "Count", title = "Histogram: Last Step Completed") +
scale_x_continuous(breaks = round(seq(min(gpu$gpuSerial), max(gpu$gpuSerial), by = 0.1),1)) +
theme(text = element_text(size=10))
ggplot(gpu, aes(gpuSerial)) + geom_histogram(binwidth = 0.1, fill=I("#0066CC"), col=I("white"), alpha=I(0.8)) +
labs(x = "Step", y = "Count", title = "Histogram: Last Step Completed")
hist(gpu$gpuSerial)
length(unique(gpu$gpuUUID))
length(unique(app_check$hostname))
length(unique(gpu$hostname))
max(gpu$timestamp)
gpu_id = unique(gpu$gpuSerial)
gpu_id = data.frame(unique(gpu$gpuSerial), 1:1024)
View(gpu_id)
gpu_id = data.frame(sort(unique(gpu$gpuSerial)), 1:1024)
gpu_id = data.frame(x = sort(unique(gpu$gpuSerial)), y =  1:1024)
gpu_id = data.frame(gpuSerial = sort(unique(gpu$gpuSerial)), id =  1:1024)
gpu_r = gpu
left_join(gpu_r, gpu_id)
gpu_r = left_join(gpu_r, gpu_id)
View(gpu_r)
hist(gpu$id)
hist(gpu_r$id)
summary(gpu_r$id)
str(gpu)
gpu$timestamp <- strptime(x = as.character(gpu$timestamp),
format = "%Y/%m/%d %H:%M")
